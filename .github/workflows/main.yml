name: Deploy (Build in CI, Pull on Server)

on:
  push:
    branches: ["main"]

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Build & Push image (tag: sha + latest)"
        uses: docker/build-push-action@v5
        env:
          IMAGE: ghcr.io/pirogramming/healthtant
          TAG: ${{ github.sha }}
        with:
          context: .
          push: true
          tags: |
            ghcr.io/pirogramming/healthtant:${{ github.sha }}
            ghcr.io/pirogramming/healthtant:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 600s
          command_timeout: 300s
          script: |
            set -euo pipefail
            
            echo "🚀 Starting deployment at $(date)"
            echo "📂 Working directory: $(pwd)"
            
            # 디렉토리 확인 및 이동
            if [ ! -d "~/Healthtant" ]; then
              echo "❌ Directory ~/Healthtant not found!"
              echo "📋 Available directories:"
              ls -la ~/ || true
              exit 1
            fi
            
            cd ~/Healthtant
            echo "📂 Changed to: $(pwd)"
            echo "📋 Directory contents:"
            ls -la . || true
            
            # Docker 및 docker-compose 확인
            echo "🐳 Checking Docker..."
            if ! command -v docker &> /dev/null; then
              echo "❌ Docker not found!"
              exit 1
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              echo "❌ docker-compose not found!"
              exit 1
            fi
            
            echo "✅ Docker version: $(docker --version)"
            echo "✅ Docker-compose version: $(docker-compose --version)"
            
            # Docker 로그인 시도
            echo "🔐 Logging into Docker registry..."
            if ! echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ secrets.USERNAME }} --password-stdin; then
              echo "❌ Docker login failed!"
              exit 1
            fi
            echo "✅ Docker login successful"
            
            # docker-compose.yml 확인
            if [ ! -f "docker-compose.yml" ]; then
              echo "❌ docker-compose.yml not found!"
              ls -la . || true
              exit 1
            fi
            
            # 현재 실행 중인 컨테이너 확인
            echo "🔍 Checking current containers..."
            docker-compose ps || true
            
            # 이미지 풀
            echo "📦 Pulling new images..."
            if ! timeout 180 docker-compose pull; then
              echo "❌ Image pull failed or timed out!"
              exit 1
            fi
            echo "✅ Images pulled successfully"
            
            # 서비스 시작/재시작
            echo "🔄 Starting services..."
            if ! timeout 120 docker-compose up -d --remove-orphans; then
              echo "❌ Service start failed or timed out!"
              echo "📋 Container logs:"
              docker-compose logs --tail=50 || true
              exit 1
            fi
            echo "✅ Services started"
            
            # 간단한 헬스 체크
            echo "🏥 Health check..."
            sleep 5  # 컨테이너 시작 대기
            
            for i in {1..10}; do
              echo "🔍 Health check attempt $i/10..."
              
              # 컨테이너 상태 확인
              if ! docker-compose ps | grep -q "Up"; then
                echo "⚠️  Containers not running properly"
                docker-compose ps || true
                docker-compose logs --tail=20 web || true
                if [ $i -eq 10 ]; then
                  echo "❌ Health check failed - containers not running"
                  exit 1
                fi
                sleep 3
                continue
              fi
              
              # 웹 서비스 확인 (포트 체크)
              if docker-compose exec -T web timeout 10 python -c "
import socket
import sys
try:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(5)
    result = sock.connect_ex(('localhost', 8000))
    sock.close()
    if result == 0:
        print('✅ Port 8000 is open')
        sys.exit(0)
    else:
        print('❌ Port 8000 is not accessible')
        sys.exit(1)
except Exception as e:
    print(f'❌ Health check error: {e}')
    sys.exit(1)
"; then
                echo "✅ Deployment successful!"
                echo "📊 Final container status:"
                docker-compose ps || true
                break
              fi
              
              if [ $i -eq 10 ]; then
                echo "❌ Health check failed after 10 attempts"
                echo "📋 Final container logs:"
                docker-compose logs --tail=30 web || true
                exit 1
              fi
              
              sleep 3
            done
            
            echo "🎉 Deployment completed at $(date)"